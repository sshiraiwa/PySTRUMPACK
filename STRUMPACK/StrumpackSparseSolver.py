# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StrumpackSparseSolver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StrumpackSparseSolver')
    _StrumpackSparseSolver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StrumpackSparseSolver', [dirname(__file__)])
        except ImportError:
            import _StrumpackSparseSolver
            return _StrumpackSparseSolver
        try:
            _mod = imp.load_module('_StrumpackSparseSolver', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StrumpackSparseSolver = swig_import_helper()
    del swig_import_helper
else:
    import _StrumpackSparseSolver
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class StrumpackSolverBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrumpackSolverBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrumpackSolverBase, name)
    __repr__ = _swig_repr

    def factor(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_factor(self)

    def reorder(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_reorder(self)

    def reorder_regular(self, nx, ny, nz):
        return _StrumpackSparseSolver.StrumpackSolverBase_reorder_regular(self, nx, ny, nz)

    def set_verbose(self, v):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_verbose(self, v)

    def set_maxit(self, maxit):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_maxit(self, maxit)

    def set_gmres_restart(self, m):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_gmres_restart(self, m)

    def set_rel_tol(self, tol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_rel_tol(self, tol)

    def set_abs_tol(self, tol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_abs_tol(self, tol)

    def set_nd_param(self, nd_param):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_nd_param(self, nd_param)

    def set_reordering_method(self, m):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_reordering_method(self, m)

    def set_GramSchmidt_type(self, t):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_GramSchmidt_type(self, t)

    def set_mc64job(self, job):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_mc64job(self, job)

    def set_matching(self, job):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_matching(self, job)

    def set_Krylov_solver(self, solver_type):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_Krylov_solver(self, solver_type)

    def enable_HSS(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_enable_HSS(self)

    def disable_HSS(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_disable_HSS(self)

    def set_HSS_min_front_size(self, size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_min_front_size(self, size)

    def set_HSS_min_sep_size(self, size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_min_sep_size(self, size)

    def set_HSS_max_rank(self, max_rank):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_max_rank(self, max_rank)

    def set_HSS_leaf_size(self, leaf_size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_leaf_size(self, leaf_size)

    def set_HSS_rel_tol(self, rctol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_rel_tol(self, rctol)

    def set_HSS_abs_tol(self, actol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_HSS_abs_tol(self, actol)

    def get_verbose(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_verbose(self)

    def get_maxit(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_maxit(self)

    def get_rel_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_rel_tol(self)

    def get_abs_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_abs_tol(self)

    def get_nd_param(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_nd_param(self)

    def get_reordering_method(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_reordering_method(self)

    def get_mc64job(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_mc64job(self)

    def get_matching(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_matching(self)

    def get_Krylov_solver(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_Krylov_solver(self)

    def get_HSS_min_front_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_min_front_size(self)

    def get_HSS_min_sep_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_min_sep_size(self)

    def get_HSS_max_rank(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_max_rank(self)

    def get_HSS_leaf_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_leaf_size(self)

    def get_HSS_rel_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_rel_tol(self)

    def get_HSS_abs_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_HSS_abs_tol(self)

    def get_its(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_its(self)

    def get_rank(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_rank(self)

    def get_factor_nonzeros(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_factor_nonzeros(self)

    def get_factor_memory(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_factor_memory(self)

    def __init__(self):
        this = _StrumpackSparseSolver.new_StrumpackSolverBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StrumpackSparseSolver.delete_StrumpackSolverBase
    __del__ = lambda self: None
StrumpackSolverBase_swigregister = _StrumpackSparseSolver.StrumpackSolverBase_swigregister
StrumpackSolverBase_swigregister(StrumpackSolverBase)

class SStrumpackSolver(StrumpackSolverBase):
    __swig_setmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SStrumpackSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SStrumpackSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StrumpackSparseSolver.new_SStrumpackSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StrumpackSparseSolver.delete_SStrumpackSolver
    __del__ = lambda self: None

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.SStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.SStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.SStrumpackSolver_solve(self, b, x, use_initial_guess)
SStrumpackSolver_swigregister = _StrumpackSparseSolver.SStrumpackSolver_swigregister
SStrumpackSolver_swigregister(SStrumpackSolver)

class DStrumpackSolver(StrumpackSolverBase):
    __swig_setmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DStrumpackSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DStrumpackSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StrumpackSparseSolver.new_DStrumpackSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StrumpackSparseSolver.delete_DStrumpackSolver
    __del__ = lambda self: None

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.DStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.DStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.DStrumpackSolver_solve(self, b, x, use_initial_guess)
DStrumpackSolver_swigregister = _StrumpackSparseSolver.DStrumpackSolver_swigregister
DStrumpackSolver_swigregister(DStrumpackSolver)

class CStrumpackSolver(StrumpackSolverBase):
    __swig_setmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStrumpackSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStrumpackSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StrumpackSparseSolver.new_CStrumpackSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StrumpackSparseSolver.delete_CStrumpackSolver
    __del__ = lambda self: None

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.CStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.CStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.CStrumpackSolver_solve(self, b, x, use_initial_guess)
CStrumpackSolver_swigregister = _StrumpackSparseSolver.CStrumpackSolver_swigregister
CStrumpackSolver_swigregister(CStrumpackSolver)

class ZStrumpackSolver(StrumpackSolverBase):
    __swig_setmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZStrumpackSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [StrumpackSolverBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZStrumpackSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StrumpackSparseSolver.new_ZStrumpackSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StrumpackSparseSolver.delete_ZStrumpackSolver
    __del__ = lambda self: None

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.ZStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.ZStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.ZStrumpackSolver_solve(self, b, x, use_initial_guess)
ZStrumpackSolver_swigregister = _StrumpackSparseSolver.ZStrumpackSolver_swigregister
ZStrumpackSolver_swigregister(ZStrumpackSolver)


import numpy as np
def make_set_csr_matrix(mat_type):
 def set_csr_matrix(self, A, symmetric=0, mat_type=mat_type):
  if A.dtype != mat_type:
    assert False, ("input data type is not correct "+str(mat_type) +
                   " is expected. " + str(A.dtype) + " is given")

  N = A.shape[0]
  values = A.data
  row_ptr = A.indptr.astype(np.int32, copy=False)
  col_ind = A.indices.astype(np.int32, copy=False)

  return self.set_csr_matrix0(N, row_ptr, col_ind, values, symmetric)
 return set_csr_matrix

def make_set_distributed_csr_matrix(mat_type):
 def set_distributed_csr_matrix(self, A,  symmetric=0, mat_type=mat_type):
  if A.dtype != mat_type:
    assert False, ("input data type is not correct "+str(mat_type) +
                   " is expected. " + str(A.dtype) + " is given")

  local_rows = A.shape[0]
  values = A.data
  row_ptr = A.indptr.astype(np.int32, copy=False)
  col_ind = A.indices.astype(np.int32, copy=False)

  from mpi4py import MPI
  dist = np.hstack(([np.int32(0)], np.cumsum(MPI.COMM_WORLD.allgather(local_rows)))).astype(np.int32, copy=False)
  return self.set_distributed_csr_matrix0(local_rows, row_ptr, col_ind, values, dist, symmetric)
 return set_distributed_csr_matrix

SStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.float32)
DStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.float64)
CStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.complex64)      
ZStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.complex128)

SStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.float32)
DStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.float64)
CStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.complex64)      
ZStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.complex128)


STRUMPACK_FLOAT = _StrumpackSparseSolver.STRUMPACK_FLOAT
STRUMPACK_DOUBLE = _StrumpackSparseSolver.STRUMPACK_DOUBLE
STRUMPACK_FLOATCOMPLEX = _StrumpackSparseSolver.STRUMPACK_FLOATCOMPLEX
STRUMPACK_DOUBLECOMPLEX = _StrumpackSparseSolver.STRUMPACK_DOUBLECOMPLEX
STRUMPACK_FLOAT_64 = _StrumpackSparseSolver.STRUMPACK_FLOAT_64
STRUMPACK_DOUBLE_64 = _StrumpackSparseSolver.STRUMPACK_DOUBLE_64
STRUMPACK_FLOATCOMPLEX_64 = _StrumpackSparseSolver.STRUMPACK_FLOATCOMPLEX_64
STRUMPACK_DOUBLECOMPLEX_64 = _StrumpackSparseSolver.STRUMPACK_DOUBLECOMPLEX_64
STRUMPACK_MT = _StrumpackSparseSolver.STRUMPACK_MT
STRUMPACK_MPI_DIST = _StrumpackSparseSolver.STRUMPACK_MPI_DIST
STRUMPACK_NATURAL = _StrumpackSparseSolver.STRUMPACK_NATURAL
STRUMPACK_METIS = _StrumpackSparseSolver.STRUMPACK_METIS
STRUMPACK_PARMETIS = _StrumpackSparseSolver.STRUMPACK_PARMETIS
STRUMPACK_SCOTCH = _StrumpackSparseSolver.STRUMPACK_SCOTCH
STRUMPACK_PTSCOTCH = _StrumpackSparseSolver.STRUMPACK_PTSCOTCH
STRUMPACK_RCM = _StrumpackSparseSolver.STRUMPACK_RCM
STRUMPACK_GEOMETRIC = _StrumpackSparseSolver.STRUMPACK_GEOMETRIC
STRUMPACK_CLASSICAL = _StrumpackSparseSolver.STRUMPACK_CLASSICAL
STRUMPACK_MODIFIED = _StrumpackSparseSolver.STRUMPACK_MODIFIED
STRUMPACK_NORMAL = _StrumpackSparseSolver.STRUMPACK_NORMAL
STRUMPACK_UNIFORM = _StrumpackSparseSolver.STRUMPACK_UNIFORM
STRUMPACK_LINEAR = _StrumpackSparseSolver.STRUMPACK_LINEAR
STRUMPACK_MERSENNE = _StrumpackSparseSolver.STRUMPACK_MERSENNE
STRUMPACK_AUTO = _StrumpackSparseSolver.STRUMPACK_AUTO
STRUMPACK_DIRECT = _StrumpackSparseSolver.STRUMPACK_DIRECT
STRUMPACK_REFINE = _StrumpackSparseSolver.STRUMPACK_REFINE
STRUMPACK_PREC_GMRES = _StrumpackSparseSolver.STRUMPACK_PREC_GMRES
STRUMPACK_GMRES = _StrumpackSparseSolver.STRUMPACK_GMRES
STRUMPACK_PREC_BICGSTAB = _StrumpackSparseSolver.STRUMPACK_PREC_BICGSTAB
STRUMPACK_BICGSTAB = _StrumpackSparseSolver.STRUMPACK_BICGSTAB
STRUMPACK_SUCCESS = _StrumpackSparseSolver.STRUMPACK_SUCCESS
STRUMPACK_MATRIX_NOT_SET = _StrumpackSparseSolver.STRUMPACK_MATRIX_NOT_SET
STRUMPACK_REORDERING_ERROR = _StrumpackSparseSolver.STRUMPACK_REORDERING_ERROR
# This file is compatible with both classic and new-style classes.


