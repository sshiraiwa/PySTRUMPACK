# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StrumpackSparseSolver
else:
    import _StrumpackSparseSolver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _StrumpackSparseSolver.SWIG_PyInstanceMethod_New
_swig_new_static_method = _StrumpackSparseSolver.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class StrumpackSolverBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def factor(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_factor(self)
    factor = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_factor)

    def reorder(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_reorder(self)
    reorder = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_reorder)

    def reorder_regular(self, nx, ny, nz):
        return _StrumpackSparseSolver.StrumpackSolverBase_reorder_regular(self, nx, ny, nz)
    reorder_regular = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_reorder_regular)

    def set_from_options(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_from_options(self)
    set_from_options = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_from_options)

    def set_verbose(self, v):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_verbose(self, v)
    set_verbose = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_verbose)

    def set_maxit(self, maxit):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_maxit(self, maxit)
    set_maxit = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_maxit)

    def set_gmres_restart(self, m):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_gmres_restart(self, m)
    set_gmres_restart = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_gmres_restart)

    def set_rel_tol(self, tol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_rel_tol(self, tol)
    set_rel_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_rel_tol)

    def set_abs_tol(self, tol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_abs_tol(self, tol)
    set_abs_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_abs_tol)

    def set_nd_param(self, nd_param):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_nd_param(self, nd_param)
    set_nd_param = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_nd_param)

    def set_reordering_method(self, m):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_reordering_method(self, m)
    set_reordering_method = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_reordering_method)

    def set_GramSchmidt_type(self, t):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_GramSchmidt_type(self, t)
    set_GramSchmidt_type = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_GramSchmidt_type)

    def set_matching(self, job):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_matching(self, job)
    set_matching = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_matching)

    def set_Krylov_solver(self, solver_type):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_Krylov_solver(self, solver_type)
    set_Krylov_solver = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_Krylov_solver)

    def enable_gpu(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_enable_gpu(self)
    enable_gpu = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_enable_gpu)

    def disable_gpu(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_disable_gpu(self)
    disable_gpu = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_disable_gpu)

    def set_compression(self, t):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression(self, t)
    set_compression = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression)

    def set_compression_min_sep_size(self, size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_min_sep_size(self, size)
    set_compression_min_sep_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_min_sep_size)

    def set_compression_min_front_size(self, size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_min_front_size(self, size)
    set_compression_min_front_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_min_front_size)

    def set_compression_leaf_size(self, size):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_leaf_size(self, size)
    set_compression_leaf_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_leaf_size)

    def set_compression_rel_tol(self, rctol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_rel_tol(self, rctol)
    set_compression_rel_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_rel_tol)

    def set_compression_abs_tol(self, actol):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_abs_tol(self, actol)
    set_compression_abs_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_abs_tol)

    def set_compression_butterfly_levels(self, l):
        return _StrumpackSparseSolver.StrumpackSolverBase_set_compression_butterfly_levels(self, l)
    set_compression_butterfly_levels = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_set_compression_butterfly_levels)

    def get_verbose(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_verbose(self)
    get_verbose = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_get_verbose)

    def get_maxit(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_maxit(self)
    get_maxit = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_get_maxit)

    def get_rel_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_rel_tol(self)
    get_rel_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_get_rel_tol)

    def get_abs_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_abs_tol(self)
    get_abs_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_get_abs_tol)

    def get_nd_param(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_get_nd_param(self)
    get_nd_param = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_get_nd_param)

    def reordering_method(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_reordering_method(self)
    reordering_method = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_reordering_method)

    def GramSchmidt_type(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_GramSchmidt_type(self)
    GramSchmidt_type = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_GramSchmidt_type)

    def matching(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_matching(self)
    matching = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_matching)

    def Krylov_solver(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_Krylov_solver(self)
    Krylov_solver = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_Krylov_solver)

    def compression(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression(self)
    compression = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression)

    def compression_min_sep_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_min_sep_size(self)
    compression_min_sep_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_min_sep_size)

    def compression_min_front_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_min_front_size(self)
    compression_min_front_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_min_front_size)

    def compression_leaf_size(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_leaf_size(self)
    compression_leaf_size = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_leaf_size)

    def compression_rel_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_rel_tol(self)
    compression_rel_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_rel_tol)

    def compression_abs_tol(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_abs_tol(self)
    compression_abs_tol = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_abs_tol)

    def compression_butterfly_levels(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_compression_butterfly_levels(self)
    compression_butterfly_levels = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_compression_butterfly_levels)

    def its(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_its(self)
    its = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_its)

    def rank(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_rank(self)
    rank = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_rank)

    def factor_nonzeros(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_factor_nonzeros(self)
    factor_nonzeros = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_factor_nonzeros)

    def factor_memory(self):
        return _StrumpackSparseSolver.StrumpackSolverBase_factor_memory(self)
    factor_memory = _swig_new_instance_method(_StrumpackSparseSolver.StrumpackSolverBase_factor_memory)

    def __init__(self):
        _StrumpackSparseSolver.StrumpackSolverBase_swiginit(self, _StrumpackSparseSolver.new_StrumpackSolverBase())
    __swig_destroy__ = _StrumpackSparseSolver.delete_StrumpackSolverBase

# Register StrumpackSolverBase in _StrumpackSparseSolver:
_StrumpackSparseSolver.StrumpackSolverBase_swigregister(StrumpackSolverBase)

class SStrumpackSolver(StrumpackSolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StrumpackSparseSolver.SStrumpackSolver_swiginit(self, _StrumpackSparseSolver.new_SStrumpackSolver(*args))
    __swig_destroy__ = _StrumpackSparseSolver.delete_SStrumpackSolver

    def proc_options(self, options):
        return _StrumpackSparseSolver.SStrumpackSolver_proc_options(self, options)
    proc_options = _swig_new_instance_method(_StrumpackSparseSolver.SStrumpackSolver_proc_options)

    def isValid(self):
        return _StrumpackSparseSolver.SStrumpackSolver_isValid(self)
    isValid = _swig_new_instance_method(_StrumpackSparseSolver.SStrumpackSolver_isValid)

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.SStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)
    set_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.SStrumpackSolver_set_csr_matrix0)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.SStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)
    set_distributed_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.SStrumpackSolver_set_distributed_csr_matrix0)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.SStrumpackSolver_solve(self, b, x, use_initial_guess)
    solve = _swig_new_instance_method(_StrumpackSparseSolver.SStrumpackSolver_solve)

# Register SStrumpackSolver in _StrumpackSparseSolver:
_StrumpackSparseSolver.SStrumpackSolver_swigregister(SStrumpackSolver)

class DStrumpackSolver(StrumpackSolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StrumpackSparseSolver.DStrumpackSolver_swiginit(self, _StrumpackSparseSolver.new_DStrumpackSolver(*args))
    __swig_destroy__ = _StrumpackSparseSolver.delete_DStrumpackSolver

    def proc_options(self, options):
        return _StrumpackSparseSolver.DStrumpackSolver_proc_options(self, options)
    proc_options = _swig_new_instance_method(_StrumpackSparseSolver.DStrumpackSolver_proc_options)

    def isValid(self):
        return _StrumpackSparseSolver.DStrumpackSolver_isValid(self)
    isValid = _swig_new_instance_method(_StrumpackSparseSolver.DStrumpackSolver_isValid)

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.DStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)
    set_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.DStrumpackSolver_set_csr_matrix0)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.DStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)
    set_distributed_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.DStrumpackSolver_set_distributed_csr_matrix0)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.DStrumpackSolver_solve(self, b, x, use_initial_guess)
    solve = _swig_new_instance_method(_StrumpackSparseSolver.DStrumpackSolver_solve)

# Register DStrumpackSolver in _StrumpackSparseSolver:
_StrumpackSparseSolver.DStrumpackSolver_swigregister(DStrumpackSolver)

class CStrumpackSolver(StrumpackSolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StrumpackSparseSolver.CStrumpackSolver_swiginit(self, _StrumpackSparseSolver.new_CStrumpackSolver(*args))
    __swig_destroy__ = _StrumpackSparseSolver.delete_CStrumpackSolver

    def proc_options(self, options):
        return _StrumpackSparseSolver.CStrumpackSolver_proc_options(self, options)
    proc_options = _swig_new_instance_method(_StrumpackSparseSolver.CStrumpackSolver_proc_options)

    def isValid(self):
        return _StrumpackSparseSolver.CStrumpackSolver_isValid(self)
    isValid = _swig_new_instance_method(_StrumpackSparseSolver.CStrumpackSolver_isValid)

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.CStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)
    set_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.CStrumpackSolver_set_csr_matrix0)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.CStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)
    set_distributed_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.CStrumpackSolver_set_distributed_csr_matrix0)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.CStrumpackSolver_solve(self, b, x, use_initial_guess)
    solve = _swig_new_instance_method(_StrumpackSparseSolver.CStrumpackSolver_solve)

# Register CStrumpackSolver in _StrumpackSparseSolver:
_StrumpackSparseSolver.CStrumpackSolver_swigregister(CStrumpackSolver)

class ZStrumpackSolver(StrumpackSolverBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StrumpackSparseSolver.ZStrumpackSolver_swiginit(self, _StrumpackSparseSolver.new_ZStrumpackSolver(*args))
    __swig_destroy__ = _StrumpackSparseSolver.delete_ZStrumpackSolver

    def proc_options(self, options):
        return _StrumpackSparseSolver.ZStrumpackSolver_proc_options(self, options)
    proc_options = _swig_new_instance_method(_StrumpackSparseSolver.ZStrumpackSolver_proc_options)

    def isValid(self):
        return _StrumpackSparseSolver.ZStrumpackSolver_isValid(self)
    isValid = _swig_new_instance_method(_StrumpackSparseSolver.ZStrumpackSolver_isValid)

    def set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern):
        return _StrumpackSparseSolver.ZStrumpackSolver_set_csr_matrix0(self, N, row_ptr, col_ind, values, symmetric_pattern)
    set_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.ZStrumpackSolver_set_csr_matrix0)

    def set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern):
        return _StrumpackSparseSolver.ZStrumpackSolver_set_distributed_csr_matrix0(self, local_rows, row_ptr, col_ind, values, dist, symmetric_pattern)
    set_distributed_csr_matrix0 = _swig_new_instance_method(_StrumpackSparseSolver.ZStrumpackSolver_set_distributed_csr_matrix0)

    def solve(self, b, x, use_initial_guess):
        return _StrumpackSparseSolver.ZStrumpackSolver_solve(self, b, x, use_initial_guess)
    solve = _swig_new_instance_method(_StrumpackSparseSolver.ZStrumpackSolver_solve)

# Register ZStrumpackSolver in _StrumpackSparseSolver:
_StrumpackSparseSolver.ZStrumpackSolver_swigregister(ZStrumpackSolver)


import numpy as np
def make_set_csr_matrix(mat_type):
 def set_csr_matrix(self, A, symmetric=0, mat_type=mat_type):
  if A.dtype != mat_type:
    assert False, ("input data type is not correct "+str(mat_type) +
                   " is expected. " + str(A.dtype) + " is given")

  N = A.shape[0]
  values = A.data
  row_ptr = A.indptr.astype(np.int32, copy=False)
  col_ind = A.indices.astype(np.int32, copy=False)

  return self.set_csr_matrix0(N, row_ptr, col_ind, values, symmetric)
 return set_csr_matrix

def make_set_distributed_csr_matrix(mat_type):
 def set_distributed_csr_matrix(self, A,  symmetric=0, mat_type=mat_type):
  if A.dtype != mat_type:
    assert False, ("input data type is not correct "+str(mat_type) +
                   " is expected. " + str(A.dtype) + " is given")

  local_rows = A.shape[0]
  values = A.data
  row_ptr = A.indptr.astype(np.int32, copy=False)
  col_ind = A.indices.astype(np.int32, copy=False)

  from mpi4py import MPI
  dist = np.hstack(([np.int32(0)], np.cumsum(MPI.COMM_WORLD.allgather(local_rows)))).astype(np.int32, copy=False)
  return self.set_distributed_csr_matrix0(local_rows, row_ptr, col_ind, values, dist, symmetric)
 return set_distributed_csr_matrix

SStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.float32)
DStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.float64)
CStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.complex64)      
ZStrumpackSolver.set_csr_matrix = make_set_csr_matrix(np.complex128)

SStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.float32)
DStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.float64)
CStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.complex64)      
ZStrumpackSolver.set_distributed_csr_matrix = make_set_distributed_csr_matrix(np.complex128)


STRUMPACK_FLOAT = _StrumpackSparseSolver.STRUMPACK_FLOAT
STRUMPACK_DOUBLE = _StrumpackSparseSolver.STRUMPACK_DOUBLE
STRUMPACK_FLOATCOMPLEX = _StrumpackSparseSolver.STRUMPACK_FLOATCOMPLEX
STRUMPACK_DOUBLECOMPLEX = _StrumpackSparseSolver.STRUMPACK_DOUBLECOMPLEX
STRUMPACK_FLOAT_64 = _StrumpackSparseSolver.STRUMPACK_FLOAT_64
STRUMPACK_DOUBLE_64 = _StrumpackSparseSolver.STRUMPACK_DOUBLE_64
STRUMPACK_FLOATCOMPLEX_64 = _StrumpackSparseSolver.STRUMPACK_FLOATCOMPLEX_64
STRUMPACK_DOUBLECOMPLEX_64 = _StrumpackSparseSolver.STRUMPACK_DOUBLECOMPLEX_64
STRUMPACK_MT = _StrumpackSparseSolver.STRUMPACK_MT
STRUMPACK_MPI_DIST = _StrumpackSparseSolver.STRUMPACK_MPI_DIST
STRUMPACK_NONE = _StrumpackSparseSolver.STRUMPACK_NONE
STRUMPACK_HSS = _StrumpackSparseSolver.STRUMPACK_HSS
STRUMPACK_BLR = _StrumpackSparseSolver.STRUMPACK_BLR
STRUMPACK_HODLR = _StrumpackSparseSolver.STRUMPACK_HODLR
STRUMPACK_LOSSLESS = _StrumpackSparseSolver.STRUMPACK_LOSSLESS
STRUMPACK_LOSSY = _StrumpackSparseSolver.STRUMPACK_LOSSY
STRUMPACK_MATCHING_NONE = _StrumpackSparseSolver.STRUMPACK_MATCHING_NONE
STRUMPACK_MATCHING_MAX_CARDINALITY = _StrumpackSparseSolver.STRUMPACK_MATCHING_MAX_CARDINALITY
STRUMPACK_MATCHING_MAX_SMALLEST_DIAGONAL = _StrumpackSparseSolver.STRUMPACK_MATCHING_MAX_SMALLEST_DIAGONAL
STRUMPACK_MATCHING_MAX_SMALLEST_DIAGONAL_2 = _StrumpackSparseSolver.STRUMPACK_MATCHING_MAX_SMALLEST_DIAGONAL_2
STRUMPACK_MATCHING_MAX_DIAGONAL_SUM = _StrumpackSparseSolver.STRUMPACK_MATCHING_MAX_DIAGONAL_SUM
STRUMPACK_MATCHING_MAX_DIAGONAL_PRODUCT_SCALING = _StrumpackSparseSolver.STRUMPACK_MATCHING_MAX_DIAGONAL_PRODUCT_SCALING
STRUMPACK_MATCHING_COMBBLAS = _StrumpackSparseSolver.STRUMPACK_MATCHING_COMBBLAS
STRUMPACK_NATURAL = _StrumpackSparseSolver.STRUMPACK_NATURAL
STRUMPACK_METIS = _StrumpackSparseSolver.STRUMPACK_METIS
STRUMPACK_PARMETIS = _StrumpackSparseSolver.STRUMPACK_PARMETIS
STRUMPACK_SCOTCH = _StrumpackSparseSolver.STRUMPACK_SCOTCH
STRUMPACK_PTSCOTCH = _StrumpackSparseSolver.STRUMPACK_PTSCOTCH
STRUMPACK_RCM = _StrumpackSparseSolver.STRUMPACK_RCM
STRUMPACK_GEOMETRIC = _StrumpackSparseSolver.STRUMPACK_GEOMETRIC
STRUMPACK_CLASSICAL = _StrumpackSparseSolver.STRUMPACK_CLASSICAL
STRUMPACK_MODIFIED = _StrumpackSparseSolver.STRUMPACK_MODIFIED
STRUMPACK_NORMAL = _StrumpackSparseSolver.STRUMPACK_NORMAL
STRUMPACK_UNIFORM = _StrumpackSparseSolver.STRUMPACK_UNIFORM
STRUMPACK_LINEAR = _StrumpackSparseSolver.STRUMPACK_LINEAR
STRUMPACK_MERSENNE = _StrumpackSparseSolver.STRUMPACK_MERSENNE
STRUMPACK_AUTO = _StrumpackSparseSolver.STRUMPACK_AUTO
STRUMPACK_DIRECT = _StrumpackSparseSolver.STRUMPACK_DIRECT
STRUMPACK_REFINE = _StrumpackSparseSolver.STRUMPACK_REFINE
STRUMPACK_PREC_GMRES = _StrumpackSparseSolver.STRUMPACK_PREC_GMRES
STRUMPACK_GMRES = _StrumpackSparseSolver.STRUMPACK_GMRES
STRUMPACK_PREC_BICGSTAB = _StrumpackSparseSolver.STRUMPACK_PREC_BICGSTAB
STRUMPACK_BICGSTAB = _StrumpackSparseSolver.STRUMPACK_BICGSTAB
STRUMPACK_SUCCESS = _StrumpackSparseSolver.STRUMPACK_SUCCESS
STRUMPACK_MATRIX_NOT_SET = _StrumpackSparseSolver.STRUMPACK_MATRIX_NOT_SET
STRUMPACK_REORDERING_ERROR = _StrumpackSparseSolver.STRUMPACK_REORDERING_ERROR


